2024-02-05 17:18:51,561 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA RTX A4000
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.0_bu.TC445_37.28845127_0
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.0+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.4
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1+cu110
OpenCV: 4.8.1
MMCV: 1.2.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMSegmentation: 0.6.0+
------------------------------------------------------------

2024-02-05 17:18:51,562 - mmseg - INFO - Distributed training: True
2024-02-05 17:18:53,032 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='CSwinEncoderDecoder',
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(type='CSWinTransformer'),
    ictdecode_head=dict(
        type='ICT_Head',
        in_channels=1024,
        channels=512,
        num_classes=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(type='HEDLoss', use_sigmoid=False, loss_weight=1.0)),
    epsa_auxiliary_head=[
        dict(
            type='EPSA_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=0,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='EPSA_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=1,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='EPSA_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=2,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='EPSA_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=3,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4))
    ],
    cswin_auxiliary_head=[
        dict(
            type='CSWIN_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=0,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='CSWIN_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=1,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='CSWIN_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=2,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='CSWIN_AUXIHead',
            in_channels=256,
            channels=512,
            in_index=3,
            img_size=320,
            num_classes=1,
            align_corners=False,
            loss_decode=dict(
                type='HEDLoss', use_sigmoid=True, loss_weight=0.4))
    ])
train_cfg = dict()
test_cfg = dict(mode='slide', crop_size=(224, 224), stride=(200, 200))
dataset_type = 'BSDSDataset'
data_root = '../../HED-BSDS'
img_norm_cfg = dict(
    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], to_rgb=True)
crop_size = (224, 224)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='RandomCropTrain', crop_size=(224, 224), cat_max_ratio=0.75),
    dict(type='PadBSDS', size=(224, 224), pad_val=0, seg_pad_val=255),
    dict(
        type='NormalizeBSDS',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225],
        to_rgb=True),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 224),
        flip=False,
        transforms=[
            dict(
                type='NormalizeBSDSTest',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                to_rgb=True),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='BSDSDataset',
        data_root='../../HED-BSDS',
        img_dir='',
        ann_dir='',
        split='ImageSets/train_pair.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomCropTrain',
                crop_size=(224, 224),
                cat_max_ratio=0.75),
            dict(type='PadBSDS', size=(224, 224), pad_val=0, seg_pad_val=255),
            dict(
                type='NormalizeBSDS',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                to_rgb=True),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='BSDSDataset',
        data_root='../../HED-BSDS',
        img_dir='',
        ann_dir='',
        split='ImageSets/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 224),
                flip=False,
                transforms=[
                    dict(
                        type='NormalizeBSDSTest',
                        mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225],
                        to_rgb=True),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='BSDSDataset',
        data_root='../../HED-BSDS',
        img_dir='',
        ann_dir='',
        split='ImageSets/test2.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 224),
                flip=False,
                transforms=[
                    dict(
                        type='NormalizeBSDSTest',
                        mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225],
                        to_rgb=True),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=20, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='SGD',
    lr=1e-06,
    momentum=0.9,
    weight_decay=0.0002,
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=10.0))))
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=1e-08, by_epoch=False)
total_iters = 100000
checkpoint_config = dict(by_epoch=False, interval=10000)
evaluation = dict(interval=10000, metric='mIoU')
find_unused_parameters = True
work_dir = './work_dirs2_2/ICT_320x320_80k_bsds_bs_8'
gpu_ids = range(0, 1)

2024-02-05 17:19:00,450 - mmseg - INFO - CSwinEncoderDecoder(
  (backbone): CSWinTransformer(
    (epsanet): EPSANet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): EPSABlock(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(64, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(64, 16, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(64, 16, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(16, 1, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(1, 16, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): EPSABlock(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(64, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(64, 16, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(64, 16, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(16, 1, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(1, 16, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): EPSABlock(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(64, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(64, 16, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(64, 16, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(16, 1, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(1, 16, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): EPSABlock(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (conv_2): Conv2d(128, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(128, 32, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(128, 32, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): EPSABlock(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(128, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(128, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(128, 32, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): EPSABlock(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(128, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(128, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(128, 32, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): EPSABlock(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(128, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(128, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(128, 32, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): EPSABlock(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): EPSABlock(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): EPSABlock(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): EPSABlock(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): EPSABlock(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): EPSABlock(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(256, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(256, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(256, 64, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): EPSABlock(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(512, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (conv_2): Conv2d(512, 128, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(512, 128, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(512, 128, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): EPSABlock(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(512, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(512, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(512, 128, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): EPSABlock(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): PSAModule(
            (conv_1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (conv_2): Conv2d(512, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=4, bias=False)
            (conv_3): Conv2d(512, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=8, bias=False)
            (conv_4): Conv2d(512, 128, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=16, bias=False)
            (se): SEWeightModule(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (sigmoid): Sigmoid()
            )
            (softmax): Softmax(dim=1)
          )
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=1000, bias=True)
    )
    (expand_block1): FCUUp(
      (conv_project): Conv2d(144, 256, kernel_size=(1, 1), stride=(1, 1))
      (bn): BatchNorm2d(256, eps=1e-06, momentum=0.1, affine=True, track_running_stats=True)
      (act): ReLU()
    )
    (expand_block2): FCUUp(
      (conv_project): Conv2d(288, 512, kernel_size=(1, 1), stride=(1, 1))
      (bn): BatchNorm2d(512, eps=1e-06, momentum=0.1, affine=True, track_running_stats=True)
      (act): ReLU()
    )
    (expand_block3): FCUUp(
      (conv_project): Conv2d(576, 1024, kernel_size=(1, 1), stride=(1, 1))
      (bn): BatchNorm2d(1024, eps=1e-06, momentum=0.1, affine=True, track_running_stats=True)
      (act): ReLU()
    )
    (expand_block4): FCUUp(
      (conv_project): Conv2d(1152, 2048, kernel_size=(1, 1), stride=(1, 1))
      (bn): BatchNorm2d(2048, eps=1e-06, momentum=0.1, affine=True, track_running_stats=True)
      (act): ReLU()
    )
    (stage1_conv_embed): Sequential(
      (0): Conv2d(3, 144, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))
      (1): Rearrange('b c h w -> b (h w) c', h=56, w=56)
      (2): LayerNorm((144,), eps=1e-05, elementwise_affine=True)
    )
    (stage1): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=144, out_features=432, bias=True)
        (norm1): LayerNorm((144,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=144, out_features=144, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=144, out_features=576, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=576, out_features=144, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((144,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=144, out_features=432, bias=True)
        (norm1): LayerNorm((144,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=144, out_features=144, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=144, out_features=576, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=576, out_features=144, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((144,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge1): Merge_Block(
      (conv): Conv2d(144, 288, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
    )
    (stage2): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=288, out_features=864, bias=True)
        (norm1): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=288, out_features=288, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=288, out_features=1152, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1152, out_features=288, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=288, out_features=864, bias=True)
        (norm1): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=288, out_features=288, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=288, out_features=1152, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1152, out_features=288, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
      )
      (2): CSWinBlock(
        (qkv): Linear(in_features=288, out_features=864, bias=True)
        (norm1): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=288, out_features=288, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=288, out_features=1152, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1152, out_features=288, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
      )
      (3): CSWinBlock(
        (qkv): Linear(in_features=288, out_features=864, bias=True)
        (norm1): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=288, out_features=288, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=288, out_features=1152, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1152, out_features=288, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((288,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge2): Merge_Block(
      (conv): Conv2d(288, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
    )
    (stage3): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (2): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (3): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (4): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (5): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (6): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (7): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (8): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (9): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (10): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (11): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (12): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (13): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (14): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (15): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (16): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (17): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (18): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (19): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (20): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (21): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (22): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (23): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (24): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (25): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (26): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (27): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (28): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (29): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (30): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
      (31): CSWinBlock(
        (qkv): Linear(in_features=576, out_features=1728, bias=True)
        (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=576, out_features=576, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=576, out_features=2304, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2304, out_features=576, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge3): Merge_Block(
      (conv): Conv2d(576, 1152, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
    )
    (stage4): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=1152, out_features=3456, bias=True)
        (norm1): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=1152, out_features=1152, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=1152, out_features=4608, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=4608, out_features=1152, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=1152, out_features=3456, bias=True)
        (norm1): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=1152, out_features=1152, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=1152, out_features=4608, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=4608, out_features=1152, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
      )
    )
    (norm): LayerNorm((1152,), eps=1e-05, elementwise_affine=True)
    (head): Linear(in_features=1152, out_features=1000, bias=True)
  )
  (ictdecode_head): ICT_Head(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): HEDLoss()
    (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (mlahead): BIMLAHead(
      (head2): Sequential(
        (0): ConvTranspose2d(64, 128, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (head3): Sequential(
        (0): ConvTranspose2d(128, 128, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (head4): Sequential(
        (0): ConvTranspose2d(320, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): ConvTranspose2d(128, 128, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
      (head5): Sequential(
        (0): ConvTranspose2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): ConvTranspose2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): ConvTranspose2d(128, 128, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
        (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (8): ReLU()
      )
    )
    (global_features): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU()
      (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU()
      (9): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (10): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU()
    )
    (edge): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (epsa_auxiliary_head): ModuleList(
    (0): EPSA_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (1): EPSA_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (2): EPSA_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (3): EPSA_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
  )
  (cswin_auxiliary_head): ModuleList(
    (0): CSWIN_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (1): CSWIN_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (2): CSWIN_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
    (3): CSWIN_AUXIHead(
      input_transform=None, ignore_index=255, align_corners=False
      (loss_decode): HEDLoss()
      (conv_seg): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout2d(p=0.1, inplace=False)
      (aux): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): ConvTranspose2d(256, 1, kernel_size=(16, 16), stride=(8, 8), padding=(4, 4), bias=False)
      )
    )
  )
)
2024-02-05 17:19:00,695 - mmseg - INFO - Loaded 28800 images
2024-02-05 17:19:08,476 - mmseg - INFO - Loaded 200 images
2024-02-05 17:19:08,477 - mmseg - INFO - Start running, host: root@autodl-container-065311b73c-7992e58a, work_dir: /root/autodl-tmp/EDTER-main/tools/work_dirs2_2/ICT_320x320_80k_bsds_bs_8
2024-02-05 17:19:08,477 - mmseg - INFO - workflow: [('train', 1)], max: 100000 iters
